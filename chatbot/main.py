from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.input_file import InputFile
from config import API_TOKEN
from performing_detection import detection

import os
import logging
import uuid
import asyncio
import dotenv
import os

# Set up logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

dotenv.load_dotenv()

IMAGE_STORE_DIR = 'data/images/'
IMAGE_DET_DIR = 'data/detection/'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –§—É–Ω–∫—Ü–º—è –∫–æ–º–∞–Ω–¥—ã start, –≤—ã–≤–æ–¥–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    intro_message = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞—Å—Ç–µ–Ω–∏–π! üå±\n"
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º. –í–æ—Ç –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n\n"
        "1. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è.\n"
        "2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.\n"
        "3. –Ø —Å–∫–∞–∂—É –≤–∞–º, —Å–æ—Ä–Ω—è–∫ —ç—Ç–æ –∏–ª–∏ –∫—É–ª—å—Ç—É—Ä–∞!\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ç–∫–æ–µ –∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
    )
    await message.answer(intro_message)


@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    photo_path = os.path.join(IMAGE_STORE_DIR, f"{uuid.uuid4()}.jpg")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    await message.photo[-1].download(photo_path)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    response = detection(photo_path)
    
    # –í—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    reply_text = response[1]
    await message.answer(reply_text)
    
    # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —á—Ç–æ-—Ç–æ –Ω–∞—à–ª–∞, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –∑–∞–¥–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if reply_text != '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ :(':
        photo = response[0]
        plot_path = os.path.join(IMAGE_DET_DIR, f"{uuid.uuid4()}.jpg")
        photo.savefig(plot_path, bbox_inches='tight')
        photo = InputFile(plot_path)
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
        await message.answer_photo(photo)

# @dp.message_handler(commands=['stop']) 
# async def stop(message: types.Message): 
#     dp.stop_bot()
#     await message.answer('Bot stopped')

async def main():
    dp.message_handler(start, commands='start')
    dp.message_handler(handle_photo, content_types=types.ContentType.PHOTO)
    await dp.start_polling()


if __name__ == '__main__':
    asyncio.run(main())